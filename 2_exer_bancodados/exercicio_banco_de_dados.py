# -*- coding: utf-8 -*-
"""Exercicio_banco_de_dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mFoCegs5wcDTLeMXpn3MMxUYNUR_auvd
"""

from google.colab import drive
drive.mount('/content/drive')

db_path = "/content/drive/MyDrive/Banco de dados/dbsql"

import sqlite3

# Conectar ao banco de dados
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Criar uma tabela de exemplo (se não existir)
cursor.execute('''
CREATE TABLE IF NOT EXISTS alunos (
    id INTEGER PRIMARY KEY,
    nome TEXT NOT NULL,
    idade INTEGER,
    curso TEXT NOT NULL
)
''')

conn.commit()
conn.close()

from sqlalchemy import create_engine, text

# Criar a conexão com SQLAlchemy
my_conn = create_engine(f"sqlite:///{db_path}")

# Verificar a estrutura da tabela 'alunos'
with my_conn.connect() as connection:
    r_set = connection.execute(text('''
    SELECT sql
    FROM sqlite_master
    WHERE name = 'alunos'
    '''))

    for row in r_set:
        print(row[0])  # Exibir a estrutura da tabela

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT name
    FROM sqlite_master
    WHERE type="table"
    """))

    for row in r_set:
        print(row[0])

with my_conn.connect() as connection:
    connection.execute(text("""
    INSERT INTO alunos (id, nome, idade, curso) VALUES (6, 'Alice', 22, 'Matemática')
    """))
    connection.execute(text("""
    INSERT INTO alunos (id, nome, idade, curso) VALUES (7, 'Bruno', 25, 'Física')
    """))
    connection.commit()

##Selecionar todos os registros da tabela "alunos".

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT * FROM alunos
    """))

for row in r_set:
    print(row)

##Selecionar o nome e a idade dos alunos com mais de 20 anos.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT nome, idade
    FROM alunos GROUP BY idade HAVING idade > 20
    """))

connection.commit()

for row in r_set:
    print(row)

##Selecionar os alunos do curso de "Tecnologia" em ordem alfabética.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT nome, curso
    FROM  alunos
    WHERE curso = 'Tecnologia' ORDER BY nome
    """))

connection.commit()

for row in r_set:
    print(row)

## Contar o número total de alunos na tabela

with my_conn.connect() as connection:
    r_set = connection.execute(text("""

    SELECT COUNT(*) FROM alunos

    """))

connection.commit()

for row in r_set:
    print(row)

## Atualize a idade de um aluno específico na tabela.

with my_conn.connect() as connection:
    connection.execute(text("""

    UPDATE alunos SET idade = 39 WHERE id = 1
    """))
    connection.commit()

    r_set = connection.execute(text("""
    SELECT * FROM alunos WHERE id = 1
    """))

    for row in r_set:
        print(row)

##Remova um aluno pelo seu ID.

with my_conn.connect() as connection:
    connection.execute(text("""
    DELETE FROM alunos WHERE id = 1
    """))
    connection.commit()

    r_set = connection.execute(text("""
    SELECT * FROM alunos
    """))

    for row in r_set:
        print(row)

## Crie uma tabela chamada "clientes" com os campos: id (chave primária), nome (texto), idade (inteiro)
## e saldo (float).

with my_conn.connect() as connection:
    connection.execute(text("""
    CREATE TABLE IF NOT EXISTS clientes (
        id INTEGER PRIMARY KEY,
        nome TEXT NOT NULL,
        idade INTEGER,
        saldo FLOAT
    )
    """))

    connection.commit()

## Insira alguns registros de clientes na tabela.
from sqlalchemy import text

with my_conn.connect() as connection:
    # Inserir cada cliente separadamente
    connection.execute(text("""
    INSERT INTO clientes (id, nome, idade, saldo) VALUES (1, 'João', 30, 1000.50)
    """))
    connection.execute(text("""
    INSERT INTO clientes (id, nome, idade, saldo) VALUES (2, 'Maria', 25, 750.25)
    """))
    connection.execute(text("""
    INSERT INTO clientes (id, nome, idade, saldo) VALUES (3, 'Fernando', 25, 500.25)
    """))
    connection.execute(text("""
    INSERT INTO clientes (id, nome, idade, saldo) VALUES (4, 'Roberto', 40, 1500.25)
    """))
    connection.execute(text("""
    INSERT INTO clientes (id, nome, idade, saldo) VALUES (5, 'Patricia', 55, 5430.25)
    """))
    connection.execute(text("""
    INSERT INTO clientes (id, nome, idade, saldo) VALUES (6, 'Cristina', 31, 10375.25)
    """))

    # Commit para salvar as alterações no banco de dados
    connection.commit()

## Selecione todos os clientes da tabela.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT * FROM clientes
    """))

    for row in r_set:
        print(row)

## Selecione o nome e a idade dos clientes com idade superior a 30 anos.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT nome, idade FROM clientes WHERE idade > 30
    """))

    for row in r_set:
        print(row)

## Calcule o saldo médio dos clientes.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT AVG(saldo) FROM clientes
    """))

    for row in r_set:
        print(row)

##Encontre o cliente com o saldo máximo.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT * FROM clientes WHERE saldo = (SELECT MAX(saldo) FROM clientes)
    """))

    for row in r_set:
        print(row)

##Conte quantos clientes têm saldo acima de 1000.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT COUNT(*) FROM clientes WHERE saldo > 1000
    """))

    for row in r_set:
        print(row)

##Atualize o saldo de um cliente específico

with my_conn.connect() as connection:
    connection.execute(text("""
    UPDATE clientes SET saldo = 10375.00 WHERE id = 6
    """))

    connection.commit()

    r_set = connection.execute(text("""
    SELECT * FROM clientes WHERE id = 6
    """))

    for row in r_set:
        print(row)

##Remova um cliente pelo seu ID.

with my_conn.connect() as connection:
    connection.execute(text("""
    DELETE FROM clientes WHERE id = 6
    """))

    connection.commit()

    r_set = connection.execute(text("""
    SELECT * FROM clientes
    """))

    for row in r_set:
        print(row)

##Crie uma segunda tabela chamada "compras" com os campos: id (chave primária), cliente_id
##(chave estrangeira referenciando o id da tabela "clientes"), produto (texto) e valor (real).

with my_conn.connect() as connection:
    connection.execute(text("""
    CREATE TABLE IF NOT EXISTS compras (
        id INTEGER PRIMARY KEY,
        cliente_id INTEGER,
        produto TEXT NOT NULL,
        valor REAL,
        FOREIGN KEY (cliente_id) REFERENCES clientes(id)
    )
    """))

    connection.commit()

    r_set = connection.execute(text("""
    SELECT name FROM sqlite_master WHERE type='table'
    """))

    for row in r_set:
        print(row)

##Insira algumas compras associadas a clientes existentes na tabela "clientes".

with my_conn.connect() as connection:
    connection.execute(text("""
    INSERT INTO compras (id, cliente_id, produto, valor) VALUES (1, 1, 'Camiseta', 45.00)
    """))
    connection.execute(text("""
    INSERT INTO compras (id, cliente_id, produto, valor) VALUES (2, 1, 'Calça', 130.00)
    """))
    connection.execute(text("""
    INSERT INTO compras (id, cliente_id, produto, valor) VALUES (3, 2, 'Tênis', 350.00)
    """))
    connection.execute(text("""
    INSERT INTO compras (id, cliente_id, produto, valor) VALUES (4, 3, 'Boné', 60.00)
    """))
    connection.execute(text("""
    INSERT INTO compras (id, cliente_id, produto, valor) VALUES (5, 4, 'Jaqueta', 250.00)
    """))

    connection.commit()

    r_set = connection.execute(text("""
    SELECT * FROM compras
    """))

    for row in r_set:
        print(row)

##Escreva uma consulta para exibir o nome do cliente, o produto e o valor de cada compra.

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT c.nome, co.produto, co.valor
    FROM clientes c
    JOIN compras co ON c.id = co.cliente_id
    """))

    for row in r_set:
        print(row)

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT * FROM compras

    """))

    for row in r_set:
        print(row)

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT * FROM alunos

    """))

    for row in r_set:
        print(row)

with my_conn.connect() as connection:
    r_set = connection.execute(text("""
    SELECT * FROM clientes

    """))

    for row in r_set:
        print(row)